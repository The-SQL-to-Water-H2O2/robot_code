{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><comment id=\":YErA!qkhuw6g(g71m,R\" x=\"704\" y=\"389\" h=\"218\" w=\"286\">Project:  \n              \nAuthor:  \n\nCreated:\n\nConfiguration:\nNone</comment><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"30\" y=\"10\"><next><block type=\"v5_motion_set_motor_stopping\" id=\"mANjL.xYTRQAFh$YRAQE\"><field name=\"MOTOR\">elevate</field><field name=\"MODE\">hold</field></block></next></block><block type=\"v5_events_when_driver\" id=\"2sxv[tBvb/TOc3zh^a$R\" x=\"570\" y=\"30\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"98I/x`Dae5ng]0tuf|3D\"><field name=\"MOTOR\">launcher</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"ymmtun(yW~cX7)::ga*e\"><field name=\"NUM\">2000</field></shadow></value></block></next></block><block type=\"v5_drivetrain_set_drive_velocity\" id=\"=X@272o?6@.:,N,eK5|{\" x=\"470\" y=\"190\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"LP5e{!,O;r|qgT^ID{Gd\"><field name=\"NUM\">40</field></shadow></value></block><block type=\"v5_events_when_autonomous\" id=\"y)n):)-6lhx,qkLtf#Zn\" x=\"30\" y=\"270\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"@oL]dRd{l3x|e`7ynF-f\"><field name=\"MOTOR\">launcher</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Fo+^]tda-5h4i%JnzGu(\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"clZ5f]v4~YL$h1P_~OJ{\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"UkmB-i!Y]M/pUrsf2q+`\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"42h)kUQ7RD:@2~%k;_DU\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\",!69M`-GXI4~KzwNQ+QD\"><field name=\"NUM\">7.25</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"f1~E+wRHjOnft/g,WY!S\"><field name=\"TURNDIRECTION\">right</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"42d}]x2;?;^FqGECHT5}\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"n3k2~+#H,3RrKSky]/+.\"><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"J`cl.tTkON7uWZx-!|gu\"><field name=\"NUM\">9.5</field></shadow></value><next><block type=\"v5_drivetrain_turn_for\" id=\"tg~!4DLyd5p9*N6dA5x~\"><field name=\"TURNDIRECTION\">left</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"V#go=yTDTJTL?K{H.TZB\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_control_forever\" id=\"F.tPZ%Bi}Wa/I(0.4jnV\" x=\"690\" y=\"270\"></block><block type=\"v5_control_wait\" id=\")%:*Ctp_6v1_+;W0g}be\" x=\"350\" y=\"830\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"|%+nn4ltus_|OXu~(KGk\"><field name=\"NUM\">2</field></shadow></value></block></xml>","rconfig":[{"port":[1,11,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio36_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[12],"name":"elevate","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[9,20],"name":"launcher","customName":true,"deviceType":"MotorGroup","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","setting":{"left":"elevate","leftDir":"false","right":"launcher","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20210708.10.00.00","appVersion":"2.0.8","fileFormat":"1.0.0","icon":"","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio36_1, false);\nmotor RightDriveSmart = motor(PORT11, ratio36_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor elevate = motor(PORT12, ratio18_1, false);\n\nmotor launcherMotorA = motor(PORT9, ratio36_1, true);\nmotor launcherMotorB = motor(PORT20, ratio36_1, false);\nmotor_group launcher = motor_group(launcherMotorA, launcherMotorB);\n\ncontroller Controller1 = controller(primary);\n\n\n\n// Generated code.\n\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control elevate\n      if (Controller1.ButtonL1.pressing()) {\n        elevate.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        elevate.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        elevate.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control launcher\n      if (Controller1.ButtonR1.pressing()) {\n        launcher.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        launcher.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        launcher.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  elevate.setStopping(hold);\n  return 0;\n}\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  launcher.setVelocity(2000.0, percent);\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  launcher.setVelocity(100.0, percent);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 7.25, inches, true);\n  Drivetrain.turnFor(right, 60.0, degrees, true);\n  Drivetrain.driveFor(reverse, 9.5, inches, true);\n  Drivetrain.turnFor(left, 100.0, degrees, true);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n\n  task rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}"}