{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</variable></variables><block type=\"v5_events_when_driver\" id=\"IBs}yZLO5^j?CDIBu!=k\" x=\"350\" y=\"-90\"><next><block type=\"v5_motion_set_motor_velocity\" id=\"L6]51UxfSh!Q$CK20b7Q\"><field name=\"MOTOR\">launcher</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"k!!io!zMZ4tRG*?m,4=u\"><field name=\"NUM\">2000</field></shadow></value></block></next></block><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"-130\" y=\"-30\"><next><block type=\"v5_motion_set_motor_stopping\" id=\"~bP@z}Txjwb]zksTiHDs\"><field name=\"MOTOR\">elevate_motor</field><field name=\"MODE\">hold</field></block></next></block><block type=\"v5_events_when_autonomous\" id=\"*^C5cb2uI2oU(1b}MHVI\" x=\"-370\" y=\"230\"><next><block type=\"v5_drivetrain_set_drive_velocity\" id=\"Vf~x[H]xubc}IHmr/#%2\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"PWi(bamY!:}T6_f%?Wg3\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_drive_for\" id=\"Gw-42,pB^xVMoxQ8?aln\"><field name=\"DIRECTION\">fwd</field><field name=\"UNITS\">in</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"y*:o:kN8@]O6tt18y]xm\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block><block type=\"v5_drivetrain_set_turn_velocity\" id=\"rRW+b2)stI/dLT[*kaSO\" x=\"1010\" y=\"870\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"p=Es-___2}NuOejR.fKI\"><field name=\"NUM\">20</field></shadow></value></block><block type=\"v5_drivetrain_set_turn_velocity\" id=\"bv8u4!1%0mLHx9^ctYHq\" x=\"910\" y=\"1170\"><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"5BxI|igO4)kLbUG[Q7+5\"><field name=\"NUM\">20</field></shadow></value></block><block type=\"v5_motion_set_motor_velocity\" id=\"LDkUXB4f{JU30lo=o7yI\" x=\"530\" y=\"1270\"><field name=\"MOTOR\">launcher</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow xmlns=\"http://www.w3.org/1999/xhtml\" type=\"math_number\" id=\"ww1~:hXw2~/{b6K@5jNf\"><field name=\"NUM\">50</field></shadow><block type=\"v5_variables_variable\" id=\"3+qwBtBHVc^Se^;?#*g=\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</field></block></value><next><block type=\"v5_control_if_then\" id=\"x.n(2v^8P}Y%Lh*x27u@\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"e-7918kVqS4MB!b!yR$t\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_variables_change_variable\" id=\"[fj].G}Q[=C`yKpI:xJj\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"[@RQGIz^?6AcNb6tuFcb\"><field name=\"NUM\">5</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"s*og,N}7*)7m0vjI`vEl\"><field name=\"MOTOR\">launcher</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow xmlns=\"http://www.w3.org/1999/xhtml\" type=\"math_number\" id=\"|M}`H5@=fn7?|:J=y}%5\"><field name=\"NUM\">50</field></shadow><block type=\"v5_variables_variable\" id=\"uVEaA[o@z*p}f9v3P)v1\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</field></block></value><next><block type=\"v5_looks_print\" id=\"m%?a{/Q|_3_W;+IHTm@+\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow xmlns=\"http://www.w3.org/1999/xhtml\" type=\"text\" id=\"Lle6iyQW~D65-,ptCEYo\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_variables_variable\" id=\"VR(lHAI:S?Uhb?!I@R=(\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</field></block></value></block></next></block></next></block></statement><next><block type=\"v5_control_if_then\" id=\"4nhS|88Z#Ep=cL?viFAl\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"nRs-c[^^_hnn473=X~6f\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonDown</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_variables_change_variable\" id=\"i/YW,CBk;S3EcOS%YIJY\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"*2[9|MFrch?j0ntth`Bw\"><field name=\"NUM\">5</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\"ZaZa~;kPpEflHbaF7ZH6\"><field name=\"MOTOR\">launcher</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow xmlns=\"http://www.w3.org/1999/xhtml\" type=\"math_number\" id=\"_SSgG%ED`I%HsQ7=)y?/\"><field name=\"NUM\">50</field></shadow><block type=\"v5_variables_variable\" id=\"Z3I{-xeXVksk+{jd;c:v\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</field></block></value><next><block type=\"v5_looks_print\" id=\"by^x8inD|HOz;Ld;)8`J\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow xmlns=\"http://www.w3.org/1999/xhtml\" type=\"text\" id=\"MwL(oHW4Z${G6Nj9MEg~\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_variables_variable\" id=\"x#Eb.J|#@.Q0knfe)[2q\"><field name=\"VARIABLE\" id=\"U`9aA+=)r+L1tzA.)-qi\">shooting_speed</field></block></value></block></next></block></next></block></statement></block></next></block></next></block></xml>","rconfig":[{"port":[1,11,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio6_1","gearRatio":"1000:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"elevate_motor","leftDir":"false","right":"launcher","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[12],"name":"elevate_motor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[9,20],"name":"launcher","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, ratio6_1, false);\nmotor RightDriveSmart = motor(PORT11, ratio6_1, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1000);\n\ncontroller Controller1 = controller(primary);\nmotor elevate_motor = motor(PORT12, ratio36_1, false);\n\nmotor launcherMotorA = motor(PORT9, ratio6_1, true);\nmotor launcherMotorB = motor(PORT20, ratio6_1, false);\nmotor_group launcher = motor_group(launcherMotorA, launcherMotorB);\n\n\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control elevate_motor\n      if (Controller1.ButtonL1.pressing()) {\n        elevate_motor.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        elevate_motor.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        elevate_motor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n      // check the ButtonR1/ButtonR2 status to control launcher\n      if (Controller1.ButtonR1.pressing()) {\n        launcher.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        launcher.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        launcher.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat shooting_speed;\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  launcher.setVelocity(2000.0, percent);\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  elevate_motor.setStopping(hold);\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.driveFor(forward, 6.0, inches, true);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}